openapi: 3.0.2
info:
  version: 1.0
  title: Smartbee CRM web application
  description: Smartbee CRM API specification
servers:
  - url: http://localhost:{port}
    description: dev environment
    variables:
      port:
        default: 16500
paths:
  /users:
    post:
      tags:
        - user
      summary: create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
        '401':
          description: Unauthorized
  /authenticate:
    post:
      tags:
        - user
      summary: authenticate user permission
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAuthentication'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        401:
          description: Unauthorized
          content:
            application/json: {}
            text/plain: {}
  /clients:
    get:
      tags:
        - client
      summary: get CRM clients
      operationId: getClients
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        404:
          description: Not Found
    post:
      tags:
        - client
      summary: create CRM client
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /clients/{id}:
    put:
      tags:
        - client
      summary: update CRM client
      parameters:
        - in: path
          name: id
          required: true
          description: CRM client ID
          schema:
            type: integer
            format: int64
      operationId: updateClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        204:
          description: No Content
          content: {}
    delete:
      tags:
        - client
      summary: delete CRM client
      parameters:
        - in: path
          name: id
          required: true
          description: CRM client ID
          schema:
            type: integer
            format: int64
      operationId: deleteClient
      responses:
        204:
          description: No Content
          content: {}
  /companies:
    get:
      tags:
        - company
      summary: get CRM companies
      operationId: getCompanies
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiCompany'
        404:
          description: Not Found
    post:
      tags:
        - company
      summary: create CRM company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCompany'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCompany'
  /companies/{id}:
    put:
      tags:
        - company
      summary: update CRM company
      parameters:
        - in: path
          name: id
          required: true
          description: CRM company ID
          schema:
            type: integer
            format: int64
      operationId: updateCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCompany'
      responses:
        204:
          description: No Content
          content: {}
    delete:
      tags:
        - company
      summary: delete CRM company
      operationId: deleteCompany
      parameters:
        - in: path
          name: id
          required: true
          description: CRM company ID
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
          content: {}

components:
  schemas:
    ApiUser:
      type: object
      properties:
        id:
          title: ID
          type: integer
          format: int64
          readOnly: true
        loginId:
          type: string
          minLength: 1
          maxLength: 50
          description: Login ID
          example: smartbee_test_01
        password:
          type: string
          minLength: 5
          maxLength: 50
          writeOnly: true
          description: Password
          example: smartbee_secret
        authority:
          type: string
          enum: [ROLE_ADMIN, ROLE_MANAGER, ROLE_OPERATOR]
          description: Role authority
          example: ROLE_OPERATOR
      required:
        - id
        - loginId
        - password
        - authority
    ApiAuthentication:
      type: object
      properties:
        loginId:
          type: string
          minLength: 1
          maxLength: 50
          description: Login ID
          example: smartbee_test_01
        password:
          type: string
          minLength: 5
          maxLength: 50
          writeOnly: true
          description: Password
          example: smartbee_secret
    JWTToken:
      type: object
      properties:
        token:
          type: string
    Client:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        companyId:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        phone:
          type: string
          minLength: 10
          maxLength: 10
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - email
        - phone
        - companyId
    ApiCompany:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 50
        address:
          type: string
          minLength: 1
          maxLength: 100
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - address
    Pageable:
      type: object
      description: pageable query parameters
      properties:
        page:
          type: integer
          minimum: 0
          maximum: 100
          default: 0
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
